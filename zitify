#!/bin/env bash

#
# Copyright (c) 2022.  NetFoundry Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

preload_dir=$(dirname ${BASH_SOURCE[0]})
preload_lib=${preload_dir}/libzitify.so

usage() {
    echo "zitify [-i <identity file>] [-b <port>:[<terminator>@]<service>] <cmd> [args]"
    echo "       Run zitified <cmd>"
    echo "       -i <identity>                     Use identity file (can be specified with ZITI_IDENTITY environment var"
    echo "       -b <port>:[<terminator>@]service  zitify binding to given <port> as binding to given service with optional terminator"
    echo ""
    echo "zitify enroll -j <enrollment token> -i <identity file> [ -k|--key <private key> [ -c|--cert certificate ] ]"
    echo "       Enroll identity"
}

function enroll() {
  python - $* <<EOF
import sys
import ctypes
import argparse

zitilib=ctypes.CDLL("${preload_lib}")
enroll=zitilib.Ziti_enroll_identity
enroll.argtypes = [
        ctypes.c_char_p,
        ctypes.c_char_p,
        ctypes.c_char_p,
        ctypes.POINTER(ctypes.c_char_p),
        ctypes.POINTER(ctypes.c_size_t)
]
enroll.restype = ctypes.c_int

parser=argparse.ArgumentParser()
parser.add_argument('-j', '--jwt', required=True)
parser.add_argument('-i', '--identity', required=True)
parser.add_argument('-k', '--key', required=False)
parser.add_argument('-c', '--cert', required=False)

args = parser.parse_args()

with open(args.jwt, 'r') as jwt:
    jwtc = jwt.read()
    jwtc = bytes(jwtc, 'utf-8')
    id_json = ctypes.c_char_p()
    id_json_len = ctypes.c_size_t()
    retcode = enroll(jwtc, args.key, args.cert,
                           ctypes.byref(id_json),
                           ctypes.byref(id_json_len))
    if retcode != 0:
         raise RuntimeError('failed to enroll')

    with open(args.identity, 'w') as id_file:
         id_file.write(id_json.value.decode())

EOF
}

while getopts "i:b:" o; do
    case "${o}" in
        i)
          export ZITI_IDENTITIES=${OPTARG}
          ;;
        b)
          echo "b = $OPTARG"
          bindings=${bindings}${bindings+;}${OPTARG}
          ;;
        ?) usage
          exit
          ;;
    esac
done
shift $((OPTIND-1))
if [[ -n "${ZITI_LOG:-}" && ${ZITI_LOG} =~ ^[0-9]+$ && ${ZITI_LOG} -ge 4 ]]; then  # if log level is at least 4
  echo "DEBUG: ZITI_IDENTITIES='${ZITI_IDENTITIES}'" >&2  # avoid polluting wrapped command's stdout
  if [[ -n "${bindings:-}" ]]; then
    echo "DEBUG: bindings='${bindings}'" >&2
  fi
fi


if [ -z "$1" ]; then
usage
exit
fi

if [ "$1" == "enroll" ]; then
  enroll "${@:2}"
  exit
fi

LD_PRELOAD="$preload_lib" ZITI_BINDINGS="${bindings}" "$@"